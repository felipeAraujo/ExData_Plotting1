sum(flips)
?rbinom
rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(1, size=100, prob=0.7)
flips2 <- rbinom(100, 1, 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(5, rep(10, 5))
rpois(5, 10)
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
t1 <- Sys.time()
t1
class(t1)
unclass(t1)
t2 <- as.POSIXlt(Sys.time())
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays(d1)
months(t1)
quarters(t2)
t3 <- strptime("October 17, 1986 08:24")
t3 <- strptime("Outubro 17, 1986 08:24")
t3 <- strptime("October 17, 1986 08:24", format = "%B %d, %Y %H:%M")
t3
t3 <- strptime("Outubro 17, 1986 08:24", format = "%B %d, %Y %H:%M")
t3
play()
?locale
?locales
Sys.setlocale("LC_TIME", "C")
nxt()
t3 <- strptime("Outubro 17, 1986 08:24")
?strptime
t3 <- strptime("October 17, 1986 08:24", format = "%B %d, %Y %H:%M")
t3 <- Sys.setlocale("LC_TIME", "C")
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units="days")
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(x = cars$dist, y = cars$speed)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed", ylab = "Stopping Distance", main = "My Plot")
plot(cars, main = "My Plot")
?plot
plot(cars, main = "My Plot", sub = "My Plot Subtitle")
plot(cars, sub = "My Plot Subtitle")
?par
plot(cars, col = 2)
plot(cars, col = 2, xlim = c(10, 15))
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2)
data("mtcars")
data(mtcars)
?boxplot
boxplot(data = mtcars, formula = mpg ~ cyl)
boxplot(mtcars, formula = mpg ~ cyl)
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
swirl()
sub("_", "", "this_is_a_test")
gsub("_", "", "this_is_a_test")
date()
class(date())
swirl()
library(swirl)
swirl()
Sys.getlocale("LC_TIME")
play()
Sys.setlocale("LC_TIME", "English")
Sys.setlocale("LC_TIME", "English")
library(swirl)
swirl()
library(lubridate)
help(package = lubridate)
this_day <- today()
this_day
year(this_day)
wday(this_day)
wday(this_day, label = TRUE)
this_moment <- now()
this_moment
second(this_moment)
my_date <= ymd("1989-05-17")
my_date <- ymd("1989-05-17")
my_date
class(my_date)
ymd("1989 May 17")
mdy("March 12, 1975")
dmy(25081985)
ymd("192012")
ymd("1920-1-2")
dt1
ymd_hms(dt1)
hms("03:22:14")
dt2
ymd(dt2)
update(this_moment, hours = 8, minutes = 34, seconds = 55)
this_moment
this_moment <- update(this_moment, hours = hour(now()), minutes = minutes(now()))
hour(now())
minutes(now())
minute(now())
this_moment <- update(this_moment, hours = hour(now()), minutes = minute(now()))
this_moment
nyc <- now("America/New_York")
nyc
depart <- nyc + days(2)
depart
depart <- update(depart, hours = 17, minutes = 34)
depart
arrive <- depart + hour(15) + minute(50)
arrive <- depart + hours(15) + minutes(50)
?with_tz
with_tz(arrive, "Asia/Hong_Kong")
arrive <- with_tz(arrive, "Asia/Hong_Kong")
arrive
last_time <- mdy("June 17, 2008", tz = "Singapore")
last_time
?interval
how_long = interval(last_time, arrive)
how_long <- interval(last_time, arrive)
as.period(how_long)
stopwatch()
library(datasets)
hist(airquality$Ozone)
with(airquality, plot(Wind, Ozone))
par("lty")
par("col")
par("bg")
par("mar")
par("mfrow")
r <- rnorm(100)
x <- rnorm(100)
hist(x)
x <- rnorm(100)
hist(x)
x <- rnorm(100)
hist(x)
y <- rnorm(100)
plot(x, y)
z <- rnorm(100)
plot(x, z)
par(mar = c(2, 2, 2, 2))
plot(x, y)
par(mar = c(4, 4, 2, 2))
plot(x, y)
plot(x, y, pch=19)
plot(x, y, pch=5)
plot(x, y, pch=19)
plot(x, y, pch=1)
plot(x, y, pch=20)
plot(x, y, pch=5)
plot(x, y, pch=)
plot(x, y, pch=2)
plot(x, y, pch=3)
plot(x, y, pch=4)
plot(x, y, pch=5)
plot(x, y, pch=6)
plot(x, y, pch=7)
plot(x, y, pch=8)
plot(x, y, pch=9)
plot(x, y, pch=10)
plot(x, y, pch=11)
plot(x, y, pch=12)
plot(x, y, pch=13)
plot(x, y, pch=14)
plot(x, y, pch=15)
plot(x, y, pch=16)
plot(x, y, pch=17)
plot(x, y, pch=18)
plot(x, y, pch=19)
plot(x, y, pch=20)
plot(x, y, pch=21)
plot(x, y, pch=1)
plot(x, y, pch=39)
plot(x, y, pch=20)
plot(x, y, pch=21)
plot(x, y, pch=1)
plot(x, y, pch=39)
plot(x, y, pch=40)
plot(x, y, pch=50)
plot(x, y, pch=51)
plot(x, y, pch=52)
plot(x, y, pch=54)
plot(x, y, pch=71)
plot(x, y, pch=100)
plot(x, y, pch=1000)
plot(x, y, pch=200)
plot(x, y, pch=150)
plot(x, y, pch=100)
plot(x, y, pch=101)
plot(x, y, pch=120)
plot(x, y, pch=124)
plot(x, y, pch=125)
plot(x, y, pch=127)
plot(x, y, pch=128)
plot(x, y, pch=126)
plot(x, y, pch=19)
example("points")
plot(x, y, pch=20)
x <- rnorm(100)
y <- rnorm(100)
plot(x, y, pch=20)
title("Scatterplot")
text(-2, -2, "Label")
legend("topleft", legend = "Data")
legend("topleft", legend = "Data", pch=20)
fit M- lm(y ~ x)
fit <- lm(y ~ x)
abline(fit)
abline(fit, lwd=3)
abline(fit, lwd=3, col = "blue")
plot(x, y, xlab = "Weight", ylab="Height", main = "Scatterplot", pch=20)
legend("topright", legend = "Data", pch = 20)
fit <- lm(y ~ x)
abline(fit, lwd=3, col="red")
z <- rpois(100)
z <- rpois(100, 2)
par(mfrow = c(2, 1))
plot(x, y, pch=20)
plot(x, z, pch=19)
par("mar")
par(mar = c(2, 2, 1, 1))
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mfrow = c(1, 2))
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mar = c(4, 4, 2, 2))
plot(x, y, pch=20)
plot(x, z, pch=19)
par(mfrow = c(2, 2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfcol=c(2, 2))
plot(x, y)
plot(x, z)
plot(z, x)
plot(y, x)
par(mfrow=c(1, 1))
x <- rnorm(100)
y <- x + rnorm(100)
g <- gl(2, 50)
g <- gl(2, 50, labels = c("Male", "Female"))
str(g)
plot(x, y)
plot(x, y, type="n")
points(x[g == "Male"], y[g == "Male"], col = "green")
points(x[g == "Female"], y[g == "Female"], col = "blue")
points(x[g == "Female"], y[g == "Female"], col = "blue", pch=19)
x11()
x11()
dev.cur()
packageVersion("swirl")
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
exit
exit()
library(swirl)
swirl()
head(pollution)
dim(pollution)
summary(pollution$pm25)
quantile(ppm)
boxplot(ppm)
boxplot(ppm, col="blue")
abline(h=12)
hist(ppm, col="green")
rug(ppm)
low
high
hist(ppm, col="green", breaks = 100)
rug(ppm)
hist(ppm, col="green")
abline(12, lwd=2)
abline(v=12, lwd=2)
abline(v=median(ppm), col="magenta", lwd=4)
names(pollution)
reg <- pollution$region
reg <- table(pollution$region)
reg
barplot(reg, col="wheat", main="Number of Counties in Each Region")
boxplot(pollution, pm25~region, col="red")
boxplot(pollution, pm25~region, col="red")
boxplot(pollution, formula(pm25 ~ region), col="red")
boxplot(pollution, col="red")
boxplot(pollution$pm25, col="red")
boxplot(pollution$regions, col="red")
boxplot(regions, col="red")
boxplot(reg, col="red")
barplot(reg, col="red")
boxplot(pm25 ~ region, data = pollution, col="red")
par(mfrow=c(2, 1), mar=(4,4,2,1))
par(mfrow=c(2, 1), mar=c(4,4,2,1))
east <- subset(pollution, pollution$region == "east")
east <- subset(pollution, region == "east")
head(east)
hist(east$pm25, col="green")
west <- subset(pollution, region == "west")
hits(subset(pollution, region == "west")$pm25, col="green")
hist(subset(pollution, region == "west")$pm25, col="green")
with(pollution, plot(latitude, pm25))
abline(12)
abline(h=12)
abline(h=12, lwd=2, lty=2)
plot(pollution$latitude, pollution$pm25, col=pollution$region)
plot(pollution$latitude, ppm, col=pollution$region)
abline(h=12, lwd-2, lty=2)
abline(h=12, lwd=2, lty=2)
par(mfrow=c(1, 2), mar=c(5,4,2,1))
west <- subset(pollution, regions == "west")
west <- subset(pollution, region == "west")
plot(west$latitude, west$pm25, main = "West")
plot(east$latitude, east$pm25, main = "East")
swirl()
library(swirl)
swirl()
library(swirl)
swirl()
?Devices
with(faithful, plot(eruptions, waiting))
with(faithful, plot(eruptions, waiting, main = "Old Faithful Geyser data"))
title(main="Old Faithful Geyser data")
dev.cur()
pdf(file="myplot.pdf")
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.cur()
dev.off()
dev.cur()
with(faithful, plot(eruptions, waiting))
title(main="Old Faithful Geyser data")
dev.copy(png, "geyserplot.png")
dev.copy(png, file = "geyserplot.png")
dev.off()
head(cars)
with(cars, plot(speed, dist))
text(mean(car$speed), max(car$dist), "SWIRL rules!")
text(mean(cars$speed), max(cars$dist), "SWIRL rules!")
head(state)
table(state$region)
xyplot(Life.Exp ~ Income | region, data = state, c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
xyplot(Life.Exp ~ Income | region, data = state, layout = c(2, 2))
head(mpg)
dim(mpg)
table(mpg$model)
qplot(displ, hwy, dataset = mpg)
qplot(displ, hwy, mpg)
qplot(displ, hwy, data = mpg)
swirl()
library(swirl)
swirl()
head(airquality)
range(airquality$Ozone, na.rm = TRUE)
hist(airquality$Ozone)
table(airquality$Month)
boxplot(Ozone ~ Month, airquality)
boxplot(Ozone ~ Month, airquality, xlab="Month", ylab="Ozone (ppb)", col.axis="blue", col.lab="red")
main("Ozone and Wind in New York City")
main(title = "Ozone and Wind in New York City")
title(main="Ozone and Wind in New York City")
with(airquality, plot(Wind, Ozone))
title(main = "Ozone and Wind in New York City")
length(par())
names(par())
par()$spin
par()$pin
par("fg")
par("pch")
par("lty")
plot(airquality$Wind, airquality$Ozone, type = "n")
title(main = "Wind and Ozone in NYC")
may <- airquality[, airquality$Month == 5]
may <- airquality[airquality$Month == 5, ]
may <- subset(airquality, Month == 5)
points(may$Wind, may$Ozone, col="blue")
points(may$Wind, may$Ozone, col="blue", pch=17)
notmay <- subset(airquality, airquality$Month != 5)
notmay <- subset(airquality, Month != 5)
points(notmay$Wind, notmay$Ozone, col="red", pch=8)
legend("topright", c(17,8), c("blue", "red"), c("May", "Other"))
legend("topright", c(17,8), c("May", "Other"), c("blue", "red"))
legend("topright", pch=c(17,8), col=c("blue", "red"), legend=c("May", "Other Months"))
abline(v=median(airquality$Wind), lty=2)
abline(v=median(airquality$Wind), lty=2, lwd=2)
par(mfrow=c(1,2))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Ozone, airquality$Solar.R, main = "Ozone and Solar Radiation")
par(mfrow=c(1,3), mar=c(4,4,2,1), oma=c(0,0,2,0))
plot(airquality$Wind, airquality$Ozone, main = "Ozone and Wind")
plot(airquality$Solar.R, airquality$Ozone, main = "Ozone and Solar Radiation")
plot(airquality$Temp, airquality$Ozone, main = "Ozone and Temperature")
mtext("Ozone and Weather in New York City", outer = TRUE)
library(swirl)
swirl()
setwd("~/courses/datascience/exploratory-data-analysis/ExData_Plotting1")
source(file.path("util_functions", "catch_data.R"))
data <- grab_data()
View(data)
hist(data$Global_active_power, xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
source(file.path("util_functions", "catch_data.R"))
grab_data()
source('plot1.R')
plot1()
plot1()
plot1()
source('plot1.R')
plot1()
source(file.path("util_functions", "grab_data.R"))
data <- grab_data()
View(data)
?hist
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", xlim = range(1,6]))
range(1,6)
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", xlim = range(1,6))
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
source(file.path("util_functions", "grab_data.R"))
data <- grab_data()
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
source(file.path("util_functions", "grab_data.R"))
data <- grab_data()
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
hist?
.;
?hist
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", axes = FALSE)
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", xlim = c(1,2,3,4,5,6))
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", xlim = c(1,6))
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", xlim = range(1,6))
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", xlim = 1)
?hist
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", breaks = c(1,2))
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", breaks = c(1,6))
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red", breaks = 6)
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
plot(x = data$Date, y = data$Global_active_power, ylab = "Global Active Power (kilowatts)")
plot(x = data$Time, y = data$Global_active_power, ylab = "Global Active Power (kilowatts)")
plot(x = data$Time, y = data$Global_active_power, ylab = "Global Active Power (kilowatts)")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "o")
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "o")
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "o")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "o")
hist(as.numeric(data$Global_active_power), xlab = "Global Active Power (kilowatts)", main = "Global Active Power", col = "red")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "o")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "n")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "o")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "n")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "n")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)")
source('plot2.R')
source('plot2.R')
source('plot1.R')
plot2()
plot(xlab = "", ylab = "Global Active Power (kilowatts)", type = "n")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "n")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "n")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_1))
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power))
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Global_active_power), xlab = "", ylab = "Global Active Power (kilowatts)", type = "n")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_1))
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_2))
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_3), xlab = "", ylab = "Energy sub metering", type = "n")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_1))
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_2))
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_3))
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_3), xlab = "", ylab = "Energy sub metering", type = "n")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_1), col = "black")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_2), col = "red")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_3), col = "blue")
plot(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_3), xlab = "", ylab = "Energy sub metering", type = "n")
lines(x = as.POSIXct(paste(data$Date, data$Time), format="%Y-%m-%d %H:%M:%S") , y = as.numeric(data$Sub_metering_1), col = "black")
